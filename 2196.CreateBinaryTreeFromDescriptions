/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.HashMap;
import java.util.Map;

class Solution {
    public TreeNode createBinaryTree(int[][] descriptions) {
        Map<Integer, TreeNode> map = new HashMap<>();
        Map<Integer, Boolean> childMap = new HashMap<>();
        for (int[] d : descriptions) {
            map.putIfAbsent(d[0], new TreeNode(d[0]));
            map.putIfAbsent(d[1], new TreeNode(d[1]));

            TreeNode parent = map.get(d[0]);
            TreeNode child = map.get(d[1]);

            if (d[2] == 1) {
                parent.left = child;
            } else {
                parent.right = child;
            }

            childMap.put(d[1], true);
        }
        for (int[] d : descriptions) {
            if (!childMap.containsKey(d[0])) {
                return map.get(d[0]);
            }
        }

        return null;
    }
}

