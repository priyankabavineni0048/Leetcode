import java.util.LinkedList;
import java.util.Queue;

class Solution {
    public int countSubIslands(int[][] grid1, int[][] grid2) {
        int ans = 0;
        int m = grid2.length;
        int n = grid2[0].length;

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid2[i][j] == 1 && bfs(grid1, grid2, i, j)) {
                    ans++;
                }
            }
        }

        return ans;
    }

    private boolean bfs(int[][] grid1, int[][] grid2, int startX, int startY) {
        int[] directions = {0, 1, 0, -1, 0}; 
        int m = grid2.length;
        int n = grid2[0].length;
        boolean isSubIsland = true;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[] {startX, startY});
        grid2[startX][startY] = 2; 
        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int x = current[0];
            int y = current[1];
            if (grid1[x][y] == 0) {
                isSubIsland = false;
            }
            for (int i = 0; i < 4; i++) {
                int newX = x + directions[i];
                int newY = y + directions[i + 1];
                if (newX >= 0 && newX < m && newY >= 0 && newY < n && grid2[newX][newY] == 1) {
                    grid2[newX][newY] = 2; 
                    queue.offer(new int[] {newX, newY});
                }
            }
        }
        return isSubIsland;
    }
}
