class Solution {
    public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
        Map<Integer, List<Pair<Integer, Double>>> graph = new HashMap<>();
        for (int i = 0; i < n; i++) {
            graph.put(i, new ArrayList<>());
        }
        for (int i = 0; i < edges.length; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            double prob = succProb[i];
            graph.get(u).add(new Pair<>(v, prob));
            graph.get(v).add(new Pair<>(u, prob));
        }
        PriorityQueue<Pair<Double, Integer>> maxHeap =
            new PriorityQueue<>((a, b) -> Double.compare(b.getKey(), a.getKey()));
        maxHeap.offer(new Pair<>(1.0, start));
        double[] maxProb = new double[n];
        maxProb[start] = 1.0;
        while (!maxHeap.isEmpty()) {
            Pair<Double, Integer> current = maxHeap.poll();
            double currentProb = current.getKey();
            int currentNode = current.getValue();
            if (currentNode == end) {
                return currentProb;
            }
            for (Pair<Integer, Double> neighbor : graph.get(currentNode)) {
                int nextNode = neighbor.getKey();
                double edgeProb = neighbor.getValue();
                double newProb = currentProb * edgeProb;
                if (newProb > maxProb[nextNode]) {
                    maxProb[nextNode] = newProb;
                    maxHeap.offer(new Pair<>(newProb, nextNode));
                }
            }
        }
        return 0.0;
    }
}
