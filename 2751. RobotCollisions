class Solution {
    static class Robot {
        int position;
        int health;
        char direction;
        int index;

        Robot(int position, int health, char direction, int index) {
            this.position = position;
            this.health = health;
            this.direction = direction;
            this.index = index;
        }
    }

    public List<Integer> survivedRobotsHealths(int[] positions, int[] healths, String directions) {
        int n = positions.length;
        List<Robot> robots = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            robots.add(new Robot(positions[i], healths[i], directions.charAt(i), i));
        }
        robots.sort(Comparator.comparingInt(a -> a.position));

        Deque<Robot> stack = new ArrayDeque<>();
        for (Robot robot : robots) {
            if (robot.direction == 'R') {
                stack.push(robot);
            } else {
                while (!stack.isEmpty() && stack.peek().direction == 'R' && stack.peek().health < robot.health) {
                    stack.pop();
                    robot.health--;
                }

                if (!stack.isEmpty() && stack.peek().direction == 'R') {
                    if (stack.peek().health == robot.health) {
                        stack.pop();
                    } else {
                        stack.peek().health--;
                    }
                } else {
                    stack.push(robot);
                }
            }
        }

        List<Robot> survivedRobots = new ArrayList<>(stack);
        survivedRobots.sort(Comparator.comparingInt(a -> a.index));

        List<Integer> result = new ArrayList<>();
        for (Robot robot : survivedRobots) {
            result.add(robot.health);
        }

        return result;
    }
}
