class Solution {
    public int[][] buildMatrix(int k, int[][] rowConditions, int[][] colConditions) {
        List<Integer>[] rowGraph = new ArrayList[k + 1];
        List<Integer>[] colGraph = new ArrayList[k + 1];
        for (int i = 1; i <= k; i++) {
            rowGraph[i] = new ArrayList<>();
            colGraph[i] = new ArrayList<>();
        }
        
        // Build the graph for row conditions
        for (int[] rowCondition : rowConditions) {
            rowGraph[rowCondition[0]].add(rowCondition[1]);
        }
        
        // Build the graph for column conditions
        for (int[] colCondition : colConditions) {
            colGraph[colCondition[0]].add(colCondition[1]);
        }
        
        // Perform topological sort on the row graph
        int[] rowIndexMap = topologicalSort(rowGraph, k);
        if (rowIndexMap == null) return new int[0][0]; // Cycle detected
        
        // Perform topological sort on the column graph
        int[] colIndexMap = topologicalSort(colGraph, k);
        if (colIndexMap == null) return new int[0][0]; // Cycle detected
        
        // Build the result matrix
        int[][] result = new int[k][k];
        for (int i = 1; i <= k; i++) {
            result[rowIndexMap[i]][colIndexMap[i]] = i;
        }
        
        return result;
    }
    
    private int[] topologicalSort(List<Integer>[] graph, int k) {
        int[] visited = new int[k + 1];
        Deque<Integer> stack = new LinkedList<>();
        for (int i = 1; i <= k; i++) {
            if (visited[i] == 0 && !dfs(graph, i, visited, stack)) {
                return null; // Cycle detected
            }
        }
        int[] order = new int[k + 1];
        int index = 0;
        while (!stack.isEmpty()) {
            order[stack.pop()] = index++;
        }
        return order;
    }
    
    private boolean dfs(List<Integer>[] graph, int node, int[] visited, Deque<Integer> stack) {
        if (visited[node] == 1) return false; // Cycle detected
        if (visited[node] == 0) {
            visited[node] = 1;
            for (int neighbor : graph[node]) {
                if (!dfs(graph, neighbor, visited, stack)) {
                    return false;
                }
            }
            visited[node] = 2;
            stack.push(node);
        }
        return true;
    }
}
