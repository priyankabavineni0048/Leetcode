class Solution {
  public int regionsBySlashes(String[] grid) {
    int n = grid.length;
    UnionFind uf = new UnionFind(4 * n * n);
    for (int i = 0; i < n; ++i) {
      for (int j = 0; j < n; ++j) {
        int root = 4 * (i * n + j);
        char c = grid[i].charAt(j);
        if (c != '/') {
          uf.union(root + 0, root + 1);
          uf.union(root + 2, root + 3);
        }
        if (c != '\\') {
          uf.union(root + 0, root + 3);
          uf.union(root + 1, root + 2);
        }
        if (j + 1 < n)
          uf.union(root + 1, 4 * (i * n + j + 1) + 3);
        if (i + 1 < n)
          uf.union(root + 2, 4 * ((i + 1) * n + j) + 0);
      }
    }

    int regions = 0;
    for (int i = 0; i < 4 * n * n; ++i)
      if (uf.find(i) == i)
        ++regions;

    return regions;
  }
}

class UnionFind {
  private int[] parent;
  private int[] rank;

  public UnionFind(int size) {
    parent = new int[size];
    rank = new int[size];
    for (int i = 0; i < size; ++i)
      parent[i] = i;
  }

  public int find(int p) {
    if (parent[p] != p)
      parent[p] = find(parent[p]); // Path compression
    return parent[p];
  }

  public void union(int p, int q) {
    int rootP = find(p);
    int rootQ = find(q);

    if (rootP == rootQ) return;

    if (rank[rootP] > rank[rootQ])
      parent[rootQ] = rootP;
    else if (rank[rootP] < rank[rootQ])
      parent[rootP] = rootQ;
    else {
      parent[rootQ] = rootP;
      rank[rootP]++;
    }
  }
}
