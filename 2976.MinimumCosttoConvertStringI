import java.util.Arrays;

class Solution {
  public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
    long ans = 0;
    int n = 26; 
    long[][] dist = new long[n][n];
    for (long[] row : dist) {
      Arrays.fill(row, Long.MAX_VALUE);
    }
    for (int i = 0; i < cost.length; i++) {
      int u = original[i] - 'a';
      int v = changed[i] - 'a';
      dist[u][v] = Math.min(dist[u][v], cost[i]);
    }
    for (int k = 0; k < n; k++) {
      for (int i = 0; i < n; i++) {
        if (dist[i][k] < Long.MAX_VALUE) {
          for (int j = 0; j < n; j++) {
            if (dist[k][j] < Long.MAX_VALUE) {
              dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
            }
          }
        }
      }
    }
    for (int i = 0; i < source.length(); i++) {
      char srcChar = source.charAt(i);
      char tgtChar = target.charAt(i);

      if (srcChar == tgtChar) {
        continue;
      }

      int u = srcChar - 'a';
      int v = tgtChar - 'a';

      if (dist[u][v] == Long.MAX_VALUE) {
        return -1; 
      }

      ans += dist[u][v];
    }

    return ans;
  }
}
